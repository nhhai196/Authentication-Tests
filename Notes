(* This file contains TODO list and QUESTIONS *)
(*
1. How to define a constant for type msg? When defining the nth element
of a list we need some such constant. However there is no constant of type
msg. So I just defined some varaible. 

2. Subtyping problem  
How to define a subset type? I found out this document.
The usual approach is to declare F as a completely related set, and declare 
a canonical injection from F to Q. You'll want to specify any interesting
property of that injection, beyond the obvious.

Parameter Q : Set.
Parameter F : Set.
Parameter inj_F_Q : F -> Q.
Axiom inj_F_Q_inj : forall x y : F, inj_F_Q x = inj_F_Q y -> x = y.
Coercion inj_F_Q : F >-> Q.
That last line declares a coercion from F to Q. That lets you put an object
of type F wherever the context requires the type Q. The type inference engine 
will insert a call to inj_F_Q. You will need to write the coercion explicitly 
occasionally, since the type inference engine, while very good, is not perfect
(perfection would be mathematically impossible). There is a chapter on coercions
in the Coq reference manual; you should at least skim through it.

Another approach is to define your subset with an extensional property,
i.e. declare a predicate P on the set (the type) Q and define F from P.

Parameter Q : Set.
Parameter P : Q -> Prop.
Definition G := sig P.
Definition inj_G_Q : G -> Q := @proj1_sig Q P.
Coercion inj_G_Q : G >-> Q.
sig is a specification, i.e. a weak sum type, i.e. a pair consisting of 
an object and a proof that said object has a certain property. sig P is
eta-equivalent to {x | P x} (which is syntactic sugar sig (fun x => P x)). 
You have to decide whether you prefer the short or the long form (you need to 
be consistent). The Program vernacular is often useful when working with weak sums. 

3. Variable VS Parameter?

4. How to fomalize a fintie list, a finite sequence of nodes in coq? 

5. Assunption about normal bundle: proposition 8.
